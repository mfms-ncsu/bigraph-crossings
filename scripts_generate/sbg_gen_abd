#! /usr/bin/perl
#: gen_abd - generate random bigraphs of a specified type
#: Usage: gen_abd [-a <density>] [-b <balance>] [-d <dimension>]
#:                [-x] [-r <rank>] [-N <number of subjects>] 
#:        where
#:          <density> = # of edges / (# of nodes - 1) (default = 1)
#:          <balance> = # of side 1 nodes / # of side 0 nodes (1)
#:          <dimension> = 1 + e, where spanning tree is constructed using
#:             distance between points in a 1 x e rectangle if 0 <= e <= 1
#:             otherwise, spanning tree is based on uniformly random point-
#:             to-point distances (0)
#:          the -x option is present if graphs are not necessarily connected,
#:          <rank> = highest rank (rank 1 implies 20 edges; after that each
#:             rank doubles the number of edges and adds 10) (default = 8)
#:          <number of subjects> = number of subjects per class (default = 32)
#:        At least one argument must be explicitly specified  

require "getopts.pl";

sub usage_msg {
    print STDERR "Usage: gen_abd\n";
    print STDERR "        [-a <density>] (default 1)\n";
    print STDERR "        [-b <balance>] (default 1)\n";
	 print STDERR "        [-x] (don't force graph to be connected)\n";
    print STDERR "        [-d <dimension>] (default 0, meaning infinity)\n";
    print STDERR "        [-r <rank>] (default 8)\n";
    print STDERR "        [-N <number of subjects>] (default 32)\n";
    print STDERR "At least one argument must be specified.\n";
}

sub replace_point {
  # replaces decimal point with a 'p' in a floating point number
  local( $number ) = @_;
  if ( ( $integer_part, $fraction ) = $number =~ /(\d*)\.(\d*)/ ) {
    return "${integer_part}p${fraction}";
  }
  return $number;
}

&Getopts( 'N:a:b:d:r:x' );

if ( ! $opt_a && ! $opt_b && ! $opt_x && ! $opt_d && ! $opt_N && ! $opt_r ) {
  &usage_msg;
  exit 1;
}

$opt_a = 1 if ! $opt_a;
$opt_b = 1 if ! $opt_b;
$opt_d = 0 if ! $opt_d;
$opt_N = 32 if ! $opt_N;
$opt_r = 8 if ! $opt_r;

print
  "a = $opt_a, b = $opt_b, x = $opt_x, d = $opt_d, N = $opt_N, r = $opt_r\n";

$density = &replace_point( $opt_a );
print "density = $density\n";

$dimension = &replace_point( $opt_d );
print "dimension = $dimension\n";

# Establish seed file and data directory, and make sure PROGRAM_DIRECTORY,
# if any, is part of the current path.
$seed_file = defined($ENV{'SEED_FILE'}) ? $ENV{'SEED_FILE'}
                                        : $ENV{'PWD'} . '/seed_file';
$data_dir = defined($ENV{'DATA_DIRECTORY'}) ? $ENV{'DATA_DIRECTORY'}
                                        : $ENV{'PWD'} . '/../data';
$ENV{'PATH'} = $ENV{'PROGRAM_DIRECTORY'} . ':'. $ENV{'PATH'}
               if defined($ENV{'PROGRAM_DIRECTORY'});
print "seed_file = $seed_file\n";
print "data_dir = $data_dir\n";

$edges = 20;
$rank = 1;

while ( $rank <= $opt_r ) {
  $nodes = int( $edges / $opt_a ) + 1;
  $n0 = int( $nodes / ( $opt_b + 1 ) ); 
  $n1 = $nodes - $n0;
  $rank_string = sprintf( "%02d", $rank );
  if ( $opt_x ) {
		$connected = 0;
		$name = "GN_${density}_rnd${dimension}_${rank_string}";
  }
  else {
		$connected = 1;
		$name = "GB_${density}_rnd${dimension}_${rank_string}";
  }
  print "Creating $name\n";
  if ( -e "$data_dir/$name" ) {
    print "Directory $name exists; remove it? ";
    $answer = <STDIN>;
    chop( $answer );
    if ( $answer eq 'y' ) {
      system "rm -r $data_dir/$name";
    }
    else {
      next;
    }
  } 
  mkdir( "$data_dir/$name", 0777 )
		|| die "Unable to create directory $data_dir/$name";
  chdir("$data_dir/$name")
		|| die "Unable to access directory $data_dir/$name";
  system( "sbg_random_graph -n0=$n0 -n1=$n1 -m=$edges -name=$name" .
          " -seed=$seed_file -c=$connected -d=$opt_d -N=$opt_N" )
      && die "Unable to execute sbg_random_graph.\n",
          "Make sure your path is set correctly or setenv PROGRAM_DIRECTORY\n";
}
continue {
  $edges = 2 * $edges + 10;
  ++$rank;
}



